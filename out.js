(function (global){
	var modules = {};
	function require(module){
		return modules[module];
	}

	function define(name, dependencies, moduleFactory){
		var exports = {};
		var module = {
			_exports: exports
		};

		moduleFactory(module, exports, require);

		modules[name] = module._exports;
	}

	define('global', [], function(module){module.exports = global;});

	define('LinearTransform', [], function (_module, _exports, _require) {
    function LinearTransform(k, l) {
        this._k = k;
        this._l = l;
    }
    LinearTransform.fromTwoPoints = function (p0, p1) {
        var k = (p1.y - p0.y) / (p1.x - p0.x);
        var l = p1.y - k * p1.x;
        return new LinearTransform(k, l);
    };
    LinearTransform.prototype._k = 1;
    LinearTransform.prototype._l = 0;
    LinearTransform.prototype.k = function (factor) {
        if (!factor) {
            return this._k;
        }
        return this._k = factor;
    };
    LinearTransform.prototype.l = function (offset) {
        if (!offset) {
            return this._l;
        }
        return this._l = offset;
    };
    LinearTransform.prototype.map = function (x) {
        return this._k * x + this._l;
    };
    LinearTransform.prototype.invert = function (y) {
        return (y - this._l) / this._k;
    };
    LinearTransform.prototype.multiplySlopeAtPoint = function (slopeFactor, x) {
        var k0, k1, l0, l1;
        k0 = this._k;
        k1 = slopeFactor * k0;
        l0 = this._l;
        l1 = k0 * x + l0 - k1 * x;
        this._k = k1;
        return this._l = l1;
    };
    _module._exports = LinearTransform;
    _module._exports = LinearTransform;
});
define('CanvasRenderer', [], function (_module, _exports, _require) {
    var CanvasRenderer = function (canvas, series, options) {
        this.canvas = canvas;
        this.width = options.width;
        this.height = options.height;
        this.ctx = canvas.getContext('2d');
    };
    CanvasRenderer.prototype.clear = function () {
        this.canvas.width = this.canvas.width;
    };
    CanvasRenderer.prototype.draw = function (seriesArr) {
        this.clear();
        for (var i = 0; i < seriesArr.length; i++) {
            var series = seriesArr[i];
            this.drawSeries(series.points, series.color);
        }
    };
    CanvasRenderer.prototype.drawSeries = function (points, color) {
        var point;
        if (!points.length)
            return;
        this.ctx.fillStyle = color;
        this.ctx.beginPath();
        this.ctx.moveTo(points[0].x, this.height);
        for (var i = 0; i < points.length; i++) {
            point = points[i];
            if (i + 1 < points.length && points[i + 1].x < 0) {
                continue;
            }
            if (i - 1 >= 0 && points[i - 1].x > this.width) {
                continue;
            }
            this.ctx.lineTo(point.x, point.y);
        }
        this.ctx.lineTo(point.x, this.height);
        this.ctx.closePath();
        this.ctx.fill();
    };
    _module._exports = CanvasRenderer;
});
define('SimpleGraph', [
    'LinearTransform',
    'CanvasRenderer'
], function (_module, _exports, _require) {
    var LinearTransform = _require('LinearTransform');
    var CanvasRenderer = _require('CanvasRenderer');
    var StackedGraph = function (elem, series, options) {
        this.elem = elem;
        this.width = options.width || elem.clientWidth;
        this.height = options.height || elem.clientHeight;
        this.xmin = options.xmin || this.getMinX(series);
        this.xmax = options.xmax || this.getMaxX(series);
        this.ymin = 0;
        this.ymax = options.ymax || this.getMaxY(series);
        this.x = LinearTransform.fromTwoPoints({
            x: this.xmin,
            y: 0
        }, {
            x: this.xmax,
            y: this.width
        });
        this.y = new LinearTransform(-this.height / this.ymax, +this.height);
        this.series = series;
        this.activeSeries = null;
        this.canvas = this.createCanvas(elem, this.width, this.height);
        this.offsetLeft = this.canvas.offsetLeft;
        this.canvasRenderer = new CanvasRenderer(this.canvas, series, {
            width: this.width,
            height: this.height
        });
        this.panOffset = 0;
        if (typeof elem.onmousewheel !== 'object') {
            this.configureForGecko();
        }
        this.initZoom();
        this.initPan();
    };
    StackedGraph.prototype.createCanvas = function (parent, width, height) {
        var canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        parent.appendChild(canvas);
        return canvas;
    };
    StackedGraph.prototype.configureForGecko = function () {
        this.mousewheelevent = 'DOMMouseScroll';
        this.zoomFactorFromMouseDelta = function (delta) {
            return delta / 90 + 1;
        };
    };
    StackedGraph.prototype.getMaxX = function (series) {
        var points = series[0].points;
        return points[points.length - 1].x;
    };
    StackedGraph.prototype.getMinX = function (series) {
        return series[0].points[0].x;
    };
    StackedGraph.prototype.getMaxY = function (series) {
        var max = -Infinity;
        for (var i = 0; i < series[0].points.length; i++) {
            var sumY = 0;
            for (var j = 0; j < series.length; j++) {
                var s = series[j];
                sumY += s.points[i].y;
            }
            if (sumY > max) {
                max = sumY;
            }
        }
        return max;
    };
    StackedGraph.prototype.mousewheelevent = 'mousewheel';
    StackedGraph.prototype.initZoom = function () {
        this.elem.addEventListener(this.mousewheelevent, function (e) {
            var zoomFactor = this.zoomFactorFromMouseDelta(e.wheelDelta);
            var xval = this.x.invert(e.x - this.offsetLeft);
            this.x.multiplySlopeAtPoint(zoomFactor, xval);
            this.draw();
            e.preventDefault();
        }.bind(this));
    };
    StackedGraph.prototype.initPan = function () {
        var _this = this, elem = this.elem, x = this.x, panStart, offsetStart;
        var panMove = function (move) {
            var panOffset = move.x - panStart;
            x.l(offsetStart + panOffset);
            return _this.draw();
        };
        var panUp = function (move) {
            panStart = 0;
            offsetStart = 0;
            elem.removeEventListener('mousemove', panMove);
            return elem.removeEventListener('mouseup', panUp);
        };
        var panDown = function (down) {
            panStart = down.x;
            offsetStart = x.l();
            elem.addEventListener('mousemove', panMove);
            return elem.addEventListener('mouseup', panUp);
        };
        return this.elem.addEventListener('mousedown', panDown);
    };
    StackedGraph.prototype.zoomFactorFromMouseDelta = function (delta) {
        return delta / 180 + 1;
    };
    StackedGraph.prototype.toPixels = function (points, offsets) {
        var pixelPoints = [], prevX = 0;
        for (var i = 0; i < points.length; i++) {
            var point = points[i];
            var offset = offsets[i];
            var x = this.x.map(point.x);
            pixelPoints.push({
                x: this.x.map(point.x),
                y: this.y.map(point.y + (offset ? offset.y : 0))
            });
            prevX = x;
        }
        return pixelPoints;
    };
    StackedGraph.prototype.draw = function () {
        var pixelSeriesArr = [], pixelSeries = [];
        for (var i = 0; i < this.series.length; i++) {
            var series = this.series[i];
            pixelSeries = this.toPixels(series.points, pixelSeries);
            pixelSeriesArr.push({
                color: series.color,
                points: pixelSeries
            });
        }
        this.canvasRenderer.draw(pixelSeriesArr);
    };
    _module._exports = StackedGraph;
});
define('metricAdapter', [], function (_module, _exports, _require) {
    var constructSeries = function (name, timestamps, values) {
        var points = [];
        for (var i = 0; i < timestamps.length; i++) {
            var timestamp = timestamps[i];
            var value = values[i];
            points.push({
                x: timestamp,
                y: value
            });
        }
        return {
            name: name,
            points: points
        };
    };
    var extractSeries = function (metrics, baseMetric) {
        var timestamps = metrics.timestamps;
        var subMetricNames = Object.keys(metrics.metrics).filter(function (metricName) {
                return metricName.indexOf(baseMetric) !== -1 && metricName !== baseMetric;
            });
        var series = [];
        for (var i = 0; i < subMetricNames.length; i++) {
            var name = subMetricNames[i];
            var s = constructSeries(name, timestamps, metrics.metrics[name]);
            s.color = 'hsl(210,97%,' + (95 - (i + 1) * 30) + '%)';
            series.push(s);
        }
        return series;
    };
    _module._exports = extractSeries;
    _module._exports.constructSeries = constructSeries;
});
define('test/metrics', [], function (_module, _exports, _require) {
    _module._exports = {
        'metrics': {
            'disk_usage': [
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                2
            ],
            'cpu_usage': [
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            'net_out/eth0': [
                null,
                3372.8,
                2742.4,
                2816,
                2816,
                3253.33333,
                2889.6,
                2742.4,
                2816,
                3253.33333,
                3169.06667,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3301.33333,
                2838.4,
                2816,
                2816,
                3253.33333,
                2816,
                2955.73333,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                3146.66667,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                3170.13333,
                2816,
                2886.4,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2978.13333,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                3125.33333,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2886.4,
                2816,
                2816,
                3253.33333,
                3170.13333,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2978.13333,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                3147.73333,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2886.4,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                3170.13333,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2978.13333,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                3147.73333,
                2816,
                2816,
                3253.33333,
                2886.4,
                2816,
                2816,
                3253.33333,
                2816,
                2816
            ],
            'net_out/eth1': [
                null,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            'net_out/eth2': [
                null,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            'net_out': [
                null,
                3372.8,
                2742.4,
                2816,
                2816,
                3253.33333,
                2889.6,
                2742.4,
                2816,
                3253.33333,
                3169.06667,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3301.33333,
                2838.4,
                2816,
                2816,
                3253.33333,
                2816,
                2955.73333,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                3146.66667,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                3170.13333,
                2816,
                2886.4,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2978.13333,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                3125.33333,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2886.4,
                2816,
                2816,
                3253.33333,
                3170.13333,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2978.13333,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                3147.73333,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2886.4,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                3170.13333,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                2816,
                2978.13333,
                2816,
                3253.33333,
                2816,
                2816,
                2816,
                3253.33333,
                3147.73333,
                2816,
                2816,
                3253.33333,
                2886.4,
                2816,
                2816,
                3253.33333,
                2816,
                2816
            ],
            'net_in/eth0': [
                null,
                7447.46667,
                6685.86667,
                7371.2,
                6330.13333,
                6941.86667,
                6586.66667,
                7243.73333,
                6119.46667,
                7729.06667,
                6889.06667,
                8103.46667,
                9342.4,
                7768.53333,
                6832.53333,
                7679.46667,
                5733.86667,
                7961.6,
                6540.26667,
                9101.86667,
                8220.26667,
                7097.6,
                5956.8,
                7730.13333,
                6918.4,
                6801.06667,
                5432,
                6609.06667,
                5248.53333,
                6856.53333,
                8014.93333,
                11382.93333,
                9685.86667,
                8014.93333,
                6208,
                8854.93333,
                9172.26667,
                7791.46667,
                8182.93333,
                7508.8,
                10851.2,
                9676.26667,
                7193.6,
                9706.13333,
                7616,
                10050.66667,
                8343.46667,
                7245.86667,
                6935.46667,
                8258.66667,
                10794.66667,
                7509.86667,
                9482.66667,
                8768.53333,
                6382.93333,
                7909.33333,
                6217.06667,
                7442.66667,
                7281.6,
                7597.33333,
                7930.66667,
                12121.06667,
                6401.06667,
                8664.53333,
                6132.26667,
                7983.46667,
                6382.93333,
                8931.73333,
                6699.73333,
                7440.53333,
                7346.66667,
                11891.2,
                11527.46667,
                8134.93333,
                7013.33333,
                7968.53333,
                6018.13333,
                8033.6,
                6828.26667,
                7598.93333,
                7470.93333,
                8065.06667,
                8942.4,
                10787.73333,
                6126.93333,
                8077.33333,
                6908.26667,
                7908.8,
                5983.46667,
                7472.53333,
                6721.6,
                7491.73333,
                9201.06667,
                8436.8,
                10232.53333,
                7612.8,
                5970.13333,
                7702.93333,
                6391.46667,
                7196.8,
                8593.6,
                7679.46667,
                6606.93333,
                7716.26667,
                10564.8,
                7828.8,
                6933.86667,
                7604.8,
                6003.2,
                7028.8,
                6172.26667,
                8547.2,
                9347.2,
                7918.4,
                7159.46667,
                12770.66667,
                6091.73333,
                7736,
                7186.13333,
                8787.2,
                7594.66667,
                10175.46667,
                8878.93333,
                9046.93333,
                6945.06667,
                7212.26667,
                6943.46667,
                6926.93333,
                5606.4,
                8105.6,
                7396.26667,
                7658.13333,
                10203.73333,
                11389.33333,
                6165.86667,
                7593.06667,
                6157.33333,
                7405.33333,
                5976.53333,
                6752.53333,
                10778.66667,
                8905.06667,
                5830.4,
                6853.86667,
                5999.46667,
                7668.8,
                6335.46667,
                7052.26667,
                6122.66667,
                6459.2,
                6721.6,
                9275.73333,
                12761.06667,
                7046.4,
                6059.73333,
                6868.8,
                5980.8,
                6614.93333,
                6040.53333,
                7990.4
            ],
            'net_in/eth1': [
                null,
                4437.86667,
                5413.33333,
                4388.26667,
                3589.86667,
                4105.06667,
                4156.8,
                4047.46667,
                3749.86667,
                4091.73333,
                4124.8,
                4182.4,
                4283.73333,
                4398.4,
                4211.73333,
                4189.86667,
                3830.93333,
                5144.53333,
                5204.26667,
                4532.8,
                4852.26667,
                3722.66667,
                3901.86667,
                4110.93333,
                4087.46667,
                3688.53333,
                3253.33333,
                3245.33333,
                2622.93333,
                3619.2,
                5536,
                7875.73333,
                4211.73333,
                4168,
                3981.86667,
                5761.06667,
                7184,
                4489.06667,
                4576,
                4066.13333,
                7132.26667,
                6635.2,
                4285.86667,
                4541.86667,
                4339.2,
                6804.26667,
                6504.53333,
                3531.73333,
                4869.33333,
                4973.86667,
                8106.66667,
                3805.86667,
                4060.26667,
                4934.4,
                4716.8,
                4493.33333,
                3731.73333,
                4012.26667,
                4686.93333,
                4406.93333,
                4220.26667,
                8413.86667,
                4657.06667,
                4372.8,
                4328.53333,
                4050.13333,
                4627.2,
                4277.86667,
                4232,
                3946.13333,
                4084.26667,
                7650.13333,
                6364.8,
                4984.53333,
                6051.2,
                5046.93333,
                3956.8,
                4224.53333,
                4240,
                4110.93333,
                4048,
                5225.6,
                6715.73333,
                7817.06667,
                3952,
                4153.6,
                4628.26667,
                3994.66667,
                3764.26667,
                4190.4,
                4466.13333,
                4369.6,
                3859.2,
                5149.86667,
                8115.2,
                4181.86667,
                3604.26667,
                4221.86667,
                3920.53333,
                3861.86667,
                4570.13333,
                4367.46667,
                4955.73333,
                5136.53333,
                8045.33333,
                4857.06667,
                4129.6,
                4934.4,
                3596.26667,
                3741.86667,
                4092.26667,
                4467.73333,
                5236.8,
                4289.6,
                5346.13333,
                8235.73333,
                3641.06667,
                3850.13333,
                5020.8,
                4549.86667,
                4304,
                6108.26667,
                6824,
                5232.53333,
                4675.73333,
                4156.8,
                4304,
                4034.13333,
                3656,
                5005.33333,
                4916.8,
                4510.93333,
                6029.86667,
                8136.53333,
                4134.4,
                4066.13333,
                3974.4,
                4010.13333,
                4280,
                3964.8,
                7278.93333,
                6133.33333,
                3828.26667,
                4418.13333,
                3596.8,
                4356.8,
                4060.26667,
                4731.73333,
                3838.4,
                3849.06667,
                3708.26667,
                6420.8,
                7092.26667,
                4158.93333,
                4092.26667,
                3950.4,
                3715.73333,
                3650.66667,
                4493.33333,
                4244.8
            ],
            'mem_usage': [
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48
            ],
            'net_in/eth2': [
                null,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            'net_in': [
                null,
                11885.33333,
                12099.2,
                11759.46667,
                9920,
                11046.93333,
                10743.46667,
                11291.2,
                9869.33333,
                11820.8,
                11013.86667,
                12285.86667,
                13626.13333,
                12166.93333,
                11044.26667,
                11869.33333,
                9564.8,
                13106.13333,
                11744.53333,
                13634.66667,
                13072.53333,
                10820.26667,
                9858.66667,
                11841.06667,
                11005.86667,
                10489.6,
                8685.33333,
                9854.4,
                7871.46667,
                10475.73333,
                13550.93333,
                19258.66667,
                13897.6,
                12182.93333,
                10189.86667,
                14616,
                16356.26667,
                12280.53333,
                12758.93333,
                11574.93333,
                17983.46667,
                16311.46667,
                11479.46667,
                14248,
                11955.2,
                16854.93333,
                14848,
                10777.6,
                11804.8,
                13232.53333,
                18901.33333,
                11315.73333,
                13542.93333,
                13702.93333,
                11099.73333,
                12402.66667,
                9948.8,
                11454.93333,
                11968.53333,
                12004.26667,
                12150.93333,
                20534.93333,
                11058.13333,
                13037.33333,
                10460.8,
                12033.6,
                11010.13333,
                13209.6,
                10931.73333,
                11386.66667,
                11430.93333,
                19541.33333,
                17892.26667,
                13119.46667,
                13064.53333,
                13015.46667,
                9974.93333,
                12258.13333,
                11068.26667,
                11709.86667,
                11518.93333,
                13290.66667,
                15658.13333,
                18604.8,
                10078.93333,
                12230.93333,
                11536.53333,
                11903.46667,
                9747.73333,
                11662.93333,
                11187.73333,
                11861.33333,
                13060.26667,
                13586.66667,
                18347.73333,
                11794.66667,
                9574.4,
                11924.8,
                10312,
                11058.66667,
                13163.73333,
                12046.93333,
                11562.66667,
                12852.8,
                18610.13333,
                12685.86667,
                11063.46667,
                12539.2,
                9599.46667,
                10770.66667,
                10264.53333,
                13014.93333,
                14584,
                12208,
                12505.6,
                21006.4,
                9732.8,
                11586.13333,
                12206.93333,
                13337.06667,
                11898.66667,
                16283.73333,
                15702.93333,
                14279.46667,
                11620.8,
                11369.06667,
                11247.46667,
                10961.06667,
                9262.4,
                13110.93333,
                12313.06667,
                12169.06667,
                16233.6,
                19525.86667,
                10300.26667,
                11659.2,
                10131.73333,
                11415.46667,
                10256.53333,
                10717.33333,
                18057.6,
                15038.4,
                9658.66667,
                11272,
                9596.26667,
                12025.6,
                10395.73333,
                11784,
                9961.06667,
                10308.26667,
                10429.86667,
                15696.53333,
                19853.33333,
                11205.33333,
                10152,
                10819.2,
                9696.53333,
                10265.6,
                10533.86667,
                12235.2
            ]
        },
        'timestamps': [
            1344591806,
            1344591821,
            1344591836,
            1344591851,
            1344591866,
            1344591881,
            1344591896,
            1344591911,
            1344591926,
            1344591941,
            1344591956,
            1344591971,
            1344591986,
            1344592001,
            1344592016,
            1344592031,
            1344592046,
            1344592061,
            1344592076,
            1344592091,
            1344592106,
            1344592121,
            1344592136,
            1344592151,
            1344592166,
            1344592181,
            1344592196,
            1344592211,
            1344592226,
            1344592241,
            1344592256,
            1344592271,
            1344592286,
            1344592301,
            1344592316,
            1344592331,
            1344592346,
            1344592361,
            1344592376,
            1344592391,
            1344592406,
            1344592421,
            1344592436,
            1344592451,
            1344592466,
            1344592481,
            1344592496,
            1344592511,
            1344592526,
            1344592541,
            1344592556,
            1344592571,
            1344592586,
            1344592601,
            1344592616,
            1344592631,
            1344592646,
            1344592661,
            1344592676,
            1344592691,
            1344592706,
            1344592721,
            1344592736,
            1344592751,
            1344592766,
            1344592781,
            1344592796,
            1344592811,
            1344592826,
            1344592841,
            1344592856,
            1344592871,
            1344592886,
            1344592901,
            1344592916,
            1344592931,
            1344592946,
            1344592961,
            1344592976,
            1344592991,
            1344593006,
            1344593021,
            1344593036,
            1344593051,
            1344593066,
            1344593081,
            1344593096,
            1344593111,
            1344593126,
            1344593141,
            1344593156,
            1344593171,
            1344593186,
            1344593201,
            1344593216,
            1344593231,
            1344593246,
            1344593261,
            1344593276,
            1344593291,
            1344593306,
            1344593321,
            1344593336,
            1344593351,
            1344593366,
            1344593381,
            1344593396,
            1344593411,
            1344593426,
            1344593441,
            1344593456,
            1344593471,
            1344593486,
            1344593501,
            1344593516,
            1344593531,
            1344593546,
            1344593561,
            1344593576,
            1344593591,
            1344593606,
            1344593621,
            1344593636,
            1344593651,
            1344593666,
            1344593681,
            1344593696,
            1344593711,
            1344593726,
            1344593741,
            1344593756,
            1344593771,
            1344593786,
            1344593801,
            1344593816,
            1344593831,
            1344593846,
            1344593861,
            1344593876,
            1344593891,
            1344593906,
            1344593921,
            1344593936,
            1344593951,
            1344593966,
            1344593981,
            1344593996,
            1344594011,
            1344594026,
            1344594041,
            1344594056,
            1344594071,
            1344594086,
            1344594101,
            1344594116,
            1344594131,
            1344594146,
            1344594161,
            1344594176,
            1344594191
        ]
    };
});
define('main.js', [
    'SimpleGraph',
    'metricAdapter',
    'test/metrics'
], function (_module, _exports, _require) {
    var CanvasGraph = _require('SimpleGraph');
    var metricAdapter = _require('metricAdapter');
    var metrics = _require('test/metrics');
    var series = metricAdapter(metrics, 'net_in');
    var elem = document.querySelectorAll('body')[0];
    elem.style.height = '100%';
    var graph = new CanvasGraph(elem, series, {
            width: 600,
            height: 350
        });
    graph.draw();
});


}(this));