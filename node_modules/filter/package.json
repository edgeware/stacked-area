{
  "name": "filter",
  "version": "0.1.1",
  "description": "A stream filter for node, to create pipable filters for arbitary streams.",
  "repository": {
    "type": "git",
    "url": "http://github.com/tim-smart/node-filter.git"
  },
  "main": "./",
  "bugs": {
    "url": "http://github.com/tim-smart/node-filter/issues"
  },
  "author": {
    "name": "Tim Smart",
    "email": "tim@fostle.com"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "  __ _ _ _            \n / _(_) | |_ ___ _ __ \n| |_| | | __/ _ \\ '__|\n|  _| | | ||  __/ |   \n|_| |_|_|\\__\\___|_|   \n\n----------------------\n\nUSAGE'\n-----\n\nvar Filter = require('filter');\n\n/*\n * Create a filter fast. Put the write method in the arguments.\n */\nvar my_filter = new Filter(function (data) {\n  data.replace('foo', 'bar');\n\n  // Just emit a data event to pass the data on.\n  this.emit('data', data);\n});\n\n/*\n * Or you can overwrite the write method yourself.\n */\nvar my_filter = new Filter;\n\nmy_filter.write = function (data) {\n  data = data.replace('foo', 'bar');\n\n  // Just emit a data event to pass the data on.\n  this.emit('data', data);\n};\n\n/*\n * Or make a new constructor altogether!\n */\nvar util = require('util');\n\nvar CoffeeFilter = function () {\n  this.replace = 'coffee';\n  this.with    = 'water';\n\n  // Make sure to call the Filter constructor.\n  Filter.call(this);\n};\n\n// Inherit methods.\nutil.inherits(CoffeeFilter, Filter);\n\n// Then overwrite the write method.\nCoffeeFilter.prototype.write = function (data) {\n  data = data.replace(this.replace, this.with);\n\n  this.emit('data', data);\n};\n\n// Create a instance\nvar coffee_filter = new CoffeeFilter;\n\n/**\n * Some example pipe action.\n *\n * Will read from java.txt, replace Java with Node, then save to node.txt -\n * all in real time!\n */\nvar fs = require('fs');\n\nvar read_stream  = fs.createReadStream('/home/guy/java.txt'),\n    write_stream = fs.createWriteStream('/home/guy/node.txt');\n\nvar filter = new Filter(function (data) {\n  this.emit('data', data.replace(/java/gi, 'node'));\n});\n\nread_stream.setEncoding('utf8');\n\nread_stream.pipe(filter);\nfilter.pipe(write_stream);\n",
  "_id": "filter@0.1.1",
  "_from": "filter"
}
